1.Binary Tree Right Side View
Code:
class Solution {
    public List<Integer> rightSideView(TreeNode treeRoot) {
        List<Integer> visibleNodes = new ArrayList<>();
        if (treeRoot == null) return visibleNodes;

        Queue<TreeNode> bfsQueue = new LinkedList<>();
        bfsQueue.add(treeRoot);

        while (!bfsQueue.isEmpty()) {
            int currentLevelSize = bfsQueue.size();
            for (int index = 0; index < currentLevelSize; index++) {
                TreeNode currentNode = bfsQueue.poll();
                if (index == currentLevelSize - 1) {
                    visibleNodes.add(currentNode.val);
                }
                if (currentNode.left != null) bfsQueue.add(currentNode.left);
                if (currentNode.right != null) bfsQueue.add(currentNode.right);
            }
        }

        return visibleNodes;
    }
}

2.Rotting oranges
Code:
class Solution {

    // Helper class to store coordinates of a rotten orange
    static class Cell {
        int row;
        int col;

        Cell(int row, int col) {
            this.row = row;
            this.col = col;
        }
    }

    public int orangesRotting(int[][] grid) {
        Queue<Cell> bfsQueue = new LinkedList<>();
        int totalOranges = 0, rottenCount = 0, minutesElapsed = 0;

        // Initialize: count total oranges and enqueue positions of initially rotten ones
        for (int row = 0; row < grid.length; row++) {
            for (int col = 0; col < grid[0].length; col++) {
                if (grid[row][col] == 1 || grid[row][col] == 2) totalOranges++;
                if (grid[row][col] == 2) bfsQueue.offer(new Cell(row, col));
            }
        }

        // If there are no oranges at all
        if (totalOranges == 0) return 0;

        while (!bfsQueue.isEmpty() && rottenCount < totalOranges) {
            int currentLevelSize = bfsQueue.size();
            rottenCount += currentLevelSize;

            if (rottenCount == totalOranges) return minutesElapsed;
            minutesElapsed++;

            for (int i = 0; i < currentLevelSize; i++) {
                Cell current = bfsQueue.poll();

                // Spread rot in 4 directions if fresh orange is found
                if (current.row + 1 < grid.length && grid[current.row + 1][current.col] == 1) {
                    grid[current.row + 1][current.col] = 2;
                    bfsQueue.offer(new Cell(current.row + 1, current.col));
                }
                if (current.row - 1 >= 0 && grid[current.row - 1][current.col] == 1) {
                    grid[current.row - 1][current.col] = 2;
                    bfsQueue.offer(new Cell(current.row - 1, current.col));
                }
                if (current.col + 1 < grid[0].length && grid[current.row][current.col + 1] == 1) {
                    grid[current.row][current.col + 1] = 2;
                    bfsQueue.offer(new Cell(current.row, current.col + 1));
                }
                if (current.col - 1 >= 0 && grid[current.row][current.col - 1] == 1) {
                    grid[current.row][current.col - 1] = 2;
                    bfsQueue.offer(new Cell(current.row, current.col - 1));
                }
            }
        }

        return -1;
    }
}

3.Course Schedule II
Code:
class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adjacencyList = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adjacencyList.add(new ArrayList<>());
        }
        for (int[] pair : prerequisites) {
            adjacencyList.get(pair[1]).add(pair[0]);
        }

        boolean[] visited = new boolean[numCourses];           
        boolean[] cycleVisited = new boolean[numCourses];    
        boolean[] fullyProcessed = new boolean[numCourses];    
        Stack<Integer> courseStack = new Stack<>();           

        for (int course = 0; course < numCourses; course++) {
            if (!visited[course]) {
                if (hasCycle(adjacencyList, fullyProcessed, cycleVisited, course)) return new int[] {};
                performDFS(adjacencyList, visited, courseStack, course);
            }
        }

        int index = 0;
        int[] courseOrder = new int[numCourses];
        while (!courseStack.isEmpty()) {
            courseOrder[index++] = courseStack.pop();
        }

        return courseOrder;
    }

    public void performDFS(ArrayList<ArrayList<Integer>> graph, boolean[] visited, Stack<Integer> stack, int current) {
        visited[current] = true;
        for (int neighbor : graph.get(current)) {
            if (!visited[neighbor]) {
                performDFS(graph, visited, stack, neighbor);
            }
        }
        stack.push(current); 
    }

    public boolean hasCycle(ArrayList<ArrayList<Integer>> graph, boolean[] fullyProcessed, boolean[] cyclePath, int node) {
        fullyProcessed[node] = true;
        cyclePath[node] = true;

        for (int neighbor : graph.get(node)) {
            if (!fullyProcessed[neighbor]) {
                if (hasCycle(graph, fullyProcessed, cyclePath, neighbor)) return true;
            }
            if (cyclePath[neighbor]) {
                return true;
            }
        }

        cyclePath[node] = false;
        return false;
    }
}
