1. Implement Queue using Stacks:
Code:
class MyQueue {
    Stack<Integer> s1;
    Stack<Integer> s2;

    public MyQueue() {
        s1 = new Stack<>();
        s2 = new Stack<>();
    }
    
    public void push(int x) {
        while(s1.size()!=0){
            s2.push(s1.pop());
        }
        s1.push(x);
        while(s2.size()!=0){
            s1.push(s2.pop());
        }
    }
    
    public int pop() {
        return s1.pop();
    }
    
    public int peek() {
        return s1.peek();
    }
    
    public boolean empty() {
        return s1.isEmpty();
    }
}

2. Decode String:
Code:
class Solution {
    public String decodeString(String s) {
        Stack<Integer>numStack=new Stack<>();
        Stack<StringBuilder>strBuild=new Stack<>();
        StringBuilder str = new StringBuilder();
        int num=0;
        for(char c:s.toCharArray()){
            if(c>='0' && c<='9'){
                num=num*10 +c -'0';
            }
            else if(c=='['){
                strBuild.push(str);
                str=new StringBuilder();
                numStack.push(num);
                num=0;
            }else if(c==']'){
                StringBuilder temp=str;
                str=strBuild.pop();
                int count=numStack.pop();
                while(count-->0){
                    str.append(temp);
                }
            }else{
                str.append(c);
            }
        }
        return str.toString();

    }
}

3. Number of People Aware of a Secret:
Code:
class Solution {
    public int peopleAwareOfSecret(int n, int delay, int forget) {
        long[] startSharing = new long[n + 1];
        long[] stopRemembering = new long[n + 1];
        long mod = (long) 1e9 + 7;

        long activeSharers = 0;
        long totalPeople = 1;

        if (1 + delay <= n)
            startSharing[1 + delay]++;
        if (1 + forget <= n)
            stopRemembering[1 + forget]++;

        for (int day = 2; day <= n; day++) {
            activeSharers += startSharing[day] % mod;
            activeSharers -= stopRemembering[day] % mod;
            totalPeople -= startSharing[day] % mod;
            totalPeople += activeSharers % mod;

            if (day + delay <= n)
                startSharing[day + delay] += activeSharers % mod;
            if (day + forget <= n)
                stopRemembering[day + forget] += activeSharers % mod;
        }

        return (int) ((activeSharers % mod + totalPeople % mod) % mod);
    }
}
