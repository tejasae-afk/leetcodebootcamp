1.Partition equal subset sum
Code:
import java.util.*;

class Solution {
    public boolean canPartition(int[] nums) {
        int sum = 0, n = nums.length;
        
        for (int i = 0; i < n; i++)
            sum += nums[i];
        
        if (sum % 2 != 0) 
            return false;

        boolean[] dp = new boolean[10001];
        dp[0] = true;
        for (int num : nums) {
            for (int j = 10000; j >= num; j--) {
                dp[j] = dp[j] || dp[j - num];
            }
            if (dp[sum / 2]) 
                return true;
        }
        return dp[sum / 2];
    }
}

2.Coin Change
Code:
import java.util.Arrays;

class Solution {
    public int coinChange(int[] denominations, int targetAmount) {
        int[] minCoins = new int[targetAmount + 1];
        Arrays.fill(minCoins, Integer.MAX_VALUE);
        minCoins[0] = 0; // Base case: 0 coins needed to make amount 0

        for (int coin : denominations) {
            for (int currentAmount = coin; currentAmount <= targetAmount; currentAmount++) {
                if (minCoins[currentAmount - coin] != Integer.MAX_VALUE) {
                    minCoins[currentAmount] = Math.min(minCoins[currentAmount], minCoins[currentAmount - coin] + 1);
                }
            }
        }

        return minCoins[targetAmount] == Integer.MAX_VALUE ? -1 : minCoins[targetAmount];
    }
}

3.Maximum Subarray
Code:
class Solution {
    public int maxSubArray(int[] array) {
        int runningSum = 0;
        int maximumSum = Integer.MIN_VALUE;

        for (int element : array) {
            runningSum += element;
            maximumSum = Math.max(maximumSum, runningSum);
            if (runningSum < 0) {
                runningSum = 0;
            }
        }

        return maximumSum;
    }
}
